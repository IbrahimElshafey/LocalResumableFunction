// <auto-generated />
using System;
using LocalResumableFunction.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocalResumableFunction.Migrations
{
    [DbContext(typeof(EngineDataContext))]
    partial class EngineDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("LocalResumableFunction.InOuts.FunctionRuntimeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FunctionState")
                        .HasColumnType("TEXT");

                    b.Property<string>("InitiatedByClassType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FunctionRuntimeInfos");
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.MethodIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MethodIdentifiers");
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.Wait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FunctionRuntimeInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFirst")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSingle")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MethodIdentifierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReplayType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateAfterWait")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FunctionRuntimeInfoId");

                    b.HasIndex("MethodIdentifierId");

                    b.ToTable("Waits");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Wait");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.ManyMethodsWait", b =>
                {
                    b.HasBaseType("LocalResumableFunction.InOuts.Wait");

                    b.Property<string>("WhenCountExpression")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ManyMethodsWait");
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.MethodWait", b =>
                {
                    b.HasBaseType("LocalResumableFunction.InOuts.Wait");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManyMethodsWaitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatchIfExpression")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedFunctionDataForMatch")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentWaitsGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SetDataExpression")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("ManyMethodsWaitId");

                    b.HasIndex("ParentWaitsGroupId");

                    b.HasDiscriminator().HasValue("MethodWait");
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.Wait", b =>
                {
                    b.HasOne("LocalResumableFunction.InOuts.FunctionRuntimeInfo", "FunctionRuntimeInfo")
                        .WithMany("Waits")
                        .HasForeignKey("FunctionRuntimeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Waits_For_FunctionRuntimeInfo");

                    b.HasOne("LocalResumableFunction.InOuts.MethodIdentifier", "MethodIdentifier")
                        .WithMany("Waits")
                        .HasForeignKey("MethodIdentifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Waits_For_MethodIdentifier");

                    b.Navigation("FunctionRuntimeInfo");

                    b.Navigation("MethodIdentifier");
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.MethodWait", b =>
                {
                    b.HasOne("LocalResumableFunction.InOuts.ManyMethodsWait", null)
                        .WithMany("MatchedMethods")
                        .HasForeignKey("ManyMethodsWaitId");

                    b.HasOne("LocalResumableFunction.InOuts.ManyMethodsWait", "ParentWaitsGroup")
                        .WithMany("WaitingMethods")
                        .HasForeignKey("ParentWaitsGroupId")
                        .HasConstraintName("FK_WMethodsWaits_For_WaitsGroup");

                    b.Navigation("ParentWaitsGroup");
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.FunctionRuntimeInfo", b =>
                {
                    b.Navigation("Waits");
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.MethodIdentifier", b =>
                {
                    b.Navigation("Waits");
                });

            modelBuilder.Entity("LocalResumableFunction.InOuts.ManyMethodsWait", b =>
                {
                    b.Navigation("MatchedMethods");

                    b.Navigation("WaitingMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
